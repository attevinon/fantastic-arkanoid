//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scriptes/Input/InputActions/BootstrapSceneActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BootstrapSceneActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BootstrapSceneActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BootstrapSceneActions"",
    ""maps"": [
        {
            ""name"": ""Bootstraper"",
            ""id"": ""cd7e6692-ff31-4e48-9ebe-4f816186bfc5"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""5ee569cc-6b6b-4315-acf3-f84b15ade192"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d246d3d-81cd-4b1d-9a39-f41f3da12b26"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62c1c42c-74ec-4431-8d3b-d48fb0bec9f0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Bootstraper
        m_Bootstraper = asset.FindActionMap("Bootstraper", throwIfNotFound: true);
        m_Bootstraper_StartGame = m_Bootstraper.FindAction("StartGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Bootstraper
    private readonly InputActionMap m_Bootstraper;
    private IBootstraperActions m_BootstraperActionsCallbackInterface;
    private readonly InputAction m_Bootstraper_StartGame;
    public struct BootstraperActions
    {
        private @BootstrapSceneActions m_Wrapper;
        public BootstraperActions(@BootstrapSceneActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_Bootstraper_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_Bootstraper; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BootstraperActions set) { return set.Get(); }
        public void SetCallbacks(IBootstraperActions instance)
        {
            if (m_Wrapper.m_BootstraperActionsCallbackInterface != null)
            {
                @StartGame.started -= m_Wrapper.m_BootstraperActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_BootstraperActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_BootstraperActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_BootstraperActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public BootstraperActions @Bootstraper => new BootstraperActions(this);
    public interface IBootstraperActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
}
